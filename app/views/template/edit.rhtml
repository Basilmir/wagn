<% slot_for(@card, @context, 'edit-template') do |slot| %>  
  <%= slot.header %>		 
 
  <div class="content">
  	<h2>Editing Template</h2>

  	<div class="editor edit-area" class="content">
  	  <% form_remote_for :card, @tmpl, :url=>slot.url_for("template/update"), 
  				 :html=>{ :id=>slot.id(:form), :class=>'editor' } do |form| %>

  <!-- 	   <table>
  					<td>
  					  <span id="<%#= slot.id :name %>" class="name-area">
  					    <span class="title"><%#= less_fancy_title(@tmpl) %></span>
  					  </span> 
  					</td>
  					<td>
  		 			  <span id="<%#= slot.id :cardtype %>" class="cardtype-area">
  							<%# if @card.type=='Cardtype' %>
  								<span class="cardtype"><%#= Card.cardtypes[@tmpl.type] %></span>
  							<%# else %>
  							  <span id="<%#= slot.id :cardtype %>" class="cardtype-area">
  								  <%#= slot.cardtype_field form, :card=>@tmpl,
  												:onchange=>slot.update_cardtype_function(   
  								        	:url=>slot.url_for('template/edit'), :update=>slot.id, 			    
  								        	:with=>"Form.serialize('#{slot.id(:form)}')" 
  								  ) %>
  							  </span>
  							<%# end %>
  					  </span>
  					</td>
  				</tr>
  			</table>
  -->	    
  	    <p class="question">What cards use this template?</p>
  	    <p class="answer">
  	      This template applies
  	      <% if @card.type=='Cardtype' %>
  	        both to any <em><%= @card.name %></em> card and
  	      <% end %>
  	      to any card whose name ends in "<em>+<%= @card.name %></em>".
  	    </p>
  	    <p class="question">What kind of template is this?</p>
  	    <div class="answer">
  	      
    	    <p><%= form.radio_button :extension_type, 'SoftTemplate' %> Soft</a> -- sets card defaults</p>
   	      <p class="small">Soft templates only affect cards that use them (see above) when you are creating a new one.  It's basically a way of setting default content and permissions for a new card.  After that, the cards are free -- changes to the template won't affect their content.  So soft templates are more or less like the God that deists believe in, only somewhat less powerful.</p>
        <p><%= form.radio_button :extension_type, 'HardTemplate' %> Hard -- controls card formatting</p>
          <p class="small">Hard templates are much more controlling.  Cards using a hard template continue to be governed by that template even after they're created.  So if you make a change to the template's content later on, that change will appear on every card.  (Note that the same principle does not apply to permissions -- you can still set custom permissions on every card.)  I'm not sure what god hard templates should be likened to, but if you want to have formatted cards that you can change without a lot of hassle, hard templates may be able to answer your prayers.">Hard</a> -- controls card format</p>
        </div>
<br><div class="title"><%= less_fancy_title(@tmpl) %></div><br><br>
  
  			<%= slot.content_field(form, :card=>@tmpl) %>
		
  			<table class="fieldset">
  				<%= render :partial=>'/card/permission_fields', :locals=>{:card=>@tmpl,:slot=>slot } %>
  			</table>
		
  			<%= button_to_function "Save", slot.save_function %>
  			<%= slot.button_to_action 'Cancel', 'options', { :before=>slot.cancel_function } %> 

  		<% end %>     
  	</div>
	
  	<div id="<%= slot.id(:remove) %>" class="edit-area remove-buttons">
  		<%= button_to_remote "Remove #{@tmpl.name}", :url=>slot.url_for("template/remove") %>
  	</div>
  	<%= slot.notice %>
  </div>
<% end %>