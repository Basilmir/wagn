wagnConf = {
  
  tinyMCEConfig : `{ <%= System.setting('*tiny mce') %> }`
  
  editorContentFunctionMap : {
    '.tinymce-textarea'      : -> tinyMCE.getInstanceById(@id).getContent(),
    '.pointer-select'        : -> pointerContent $(this).val(),
    '.pointer-multiselect'   : -> pointerContent $(this).val(),
    '.pointer-radio-list'    : -> pointerContent $(this).find('input:checked').val(),
    '.pointer-list-ul'       : -> pointerContent $(this).find('input'        ).map( -> $(this).val() ),
    '.pointer-checkbox-list' : -> pointerContent $(this).find('input:checked').map( -> $(this).val() )
  }
  
  editorInitFunctionMap : {
    '.tinymce-textarea' : -> wagnConf.initTinyMCE()
  }

  initTinyMCE: ()->
    conf = if wagnConf.tinyMCEConfig? then wagnConf.tinyMCEConfig else {}
    conf['mode'] = "specific_textareas"
    conf['editor_selector'] = @id
    tinyMCE.init conf

}

$('.set_select').live 'change', ->
  $(this).closest('form').submit()

$('.pointer-item-add').live 'click', (event)->
  last_item = $(this).closest('ul').find '.pointer-li:last'
  new_item = last_item.clone()
  new_item.find('input').val ''
  last_item.after new_item
  event.preventDefault(); # Prevent link from following its href

$('.pointer-item-delete').live 'click', (event)->
  item = $(this).closest 'li'
  if item.closest('ul').find('.pointer-li').length > 1
    item.remove()
  else
    item.find('input').val ''
  event.preventDefault(); # Prevent link from following its href


pointerContent = (vals) ->
  list = $.map $.makeArray(vals), (v)-> if v then '[[' + v + ']]'
  $.makeArray(list).join "\n"

#editor_hooks(:save=>%{
#  boxes = jQuery('input[name=#{eid}-checkbox]:checked')
#  vals = boxes.map(function(i,n){ return jQuery(n).val(); }).get();
#  setPointerContent('#{eid}', vals );  
#  return true;
#})



window.wagnConf = wagnConf